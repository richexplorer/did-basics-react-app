{"version":3,"sources":["App.js","index.js"],"names":["endpoint","App","useState","name","setName","image","setImage","loaded","setLoaded","connect","a","window","ethereum","request","method","addresses","address","ceramic","CeramicClient","idx","IDX","get","data","console","log","avatar","threeIdConnect","ThreeIdConnect","provider","EthereumAuthProvider","did","DID","getDidProvider","resolver","ThreeIdResolver","getResolver","setDID","authenticate","set","className","placeholder","onChange","e","target","value","onClick","style","width","src","ReactDOM","render","document","getElementById"],"mappings":"oZASMA,EAAW,oCA+EFC,MA7Ef,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAHa,SAKEC,IALF,2EAKb,4BAAAC,EAAA,sEAC0BC,OAAOC,SAASC,QAAQ,CAC9CC,OAAQ,wBAFZ,cACQC,EADR,yBAISA,GAJT,4CALa,kEAYb,sCAAAL,EAAA,sEAC0BD,IAD1B,0CACSO,EADT,KAEQC,EAAU,IAAIC,IAAclB,GAC5BmB,EAAM,IAAIC,IAAI,CAAEH,YAHxB,mBAMuBE,EAAIE,IACrB,eADiB,UAEdL,EAFc,cANvB,QAMUM,EANV,OAUIC,QAAQC,IAAI,SAAUF,GAClBA,EAAKnB,MAAMC,EAAQkB,EAAKnB,MACxBmB,EAAKG,QAAQnB,EAASgB,EAAKG,QAZnC,kDAcIF,QAAQC,IAAI,UAAZ,MACAhB,GAAU,GAfd,2DAZa,kEA+Bb,0CAAAE,EAAA,sEAC0BD,IAD1B,0CACSO,EADT,KAEQC,EAAU,IAAIC,IAAclB,GAC5B0B,EAAiB,IAAIC,IACrBC,EAAW,IAAIC,IAAqBlB,OAAOC,SAAUI,GAJ7D,UAMQU,EAAejB,QAAQmB,GAN/B,eAQQE,EAAM,IAAIC,MAAI,CAClBH,SAAUF,EAAeM,iBACzBC,SAAS,eACJC,IAAgBC,YAAYlB,MAInCM,QAAQC,IAAIM,GAEZb,EAAQmB,OAAON,GAjBjB,UAkBQb,EAAQa,IAAIO,eAlBpB,eAoBQlB,EAAM,IAAIC,IAAI,CAAEH,YAEtBM,QAAQC,IAAIM,GAtBd,UAwBQX,EAAImB,IAAI,eAAgB,CAC5BnC,OACAsB,OAAQpB,IA1BZ,QA6BEkB,QAAQC,IAAI,oBA7Bd,6CA/Ba,sBA+Db,OACE,sBAAKe,UAAU,MAAf,UACE,uBAAOC,YAAY,OAAOC,SAAU,SAAAC,GAAC,OAAItC,EAAQsC,EAAEC,OAAOC,UAC1D,uBAAOJ,YAAY,gBAAgBC,SAAU,SAAAC,GAAC,OAAIpC,EAASoC,EAAEC,OAAOC,UACpE,wBAAQC,QAnEC,2CAmET,yBACA,wBAAQA,QApEC,2CAoET,0BAEE1C,GAAQ,6BAAKA,IACbE,GAAS,qBAAKyC,MAAO,CAAEC,MAAO,SAAWC,IAAK3C,KAC7CA,IAAUF,GAAQI,GAAW,sEChFtC0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.58215992.chunk.js","sourcesContent":["import { useState } from 'react'\n\nimport CeramicClient from '@ceramicnetwork/http-client'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\n\nimport { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { DID } from 'dids'\nimport { IDX } from '@ceramicstudio/idx'\n\nconst endpoint = \"https://ceramic-clay.3boxlabs.com\"\n\nfunction App() {\n  const [name, setName] = useState('')\n  const [image, setImage] = useState('')\n  const [loaded, setLoaded] = useState(false)\n\n  async function connect() {\n    const addresses = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    })\n    return addresses\n  }\n\n  async function readProfile() {\n    const [address] = await connect()\n    const ceramic = new CeramicClient(endpoint)\n    const idx = new IDX({ ceramic })\n\n    try {\n      const data = await idx.get(\n        'basicProfile',\n        `${address}@eip155:1`\n      )\n      console.log('data: ', data)\n      if (data.name) setName(data.name)\n      if (data.avatar) setImage(data.avatar)\n    } catch (error) {\n      console.log('error: ', error)\n      setLoaded(true)\n    }\n  }\n\n  async function updateProfile() {\n    const [address] = await connect()\n    const ceramic = new CeramicClient(endpoint)\n    const threeIdConnect = new ThreeIdConnect()\n    const provider = new EthereumAuthProvider(window.ethereum, address)\n\n    await threeIdConnect.connect(provider)\n\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: {\n        ...ThreeIdResolver.getResolver(ceramic)\n      }\n    })\n\n    console.log(did);\n\n    ceramic.setDID(did)\n    await ceramic.did.authenticate()\n\n    const idx = new IDX({ ceramic })\n\n    console.log(did);\n\n    await idx.set('basicProfile', {\n      name,\n      avatar: image\n    })\n\n    console.log(\"Profile updated!\")\n  }\n\n  return (\n    <div className=\"App\">\n      <input placeholder=\"Name\" onChange={e => setName(e.target.value)} />\n      <input placeholder=\"Profile Image\" onChange={e => setImage(e.target.value)} />\n      <button onClick={updateProfile}>Set Profile</button>\n      <button onClick={readProfile}>Read Profile</button>\n\n      { name && <h3>{name}</h3> }\n      { image && <img style={{ width: '400px' }} src={image} /> }\n      {(!image && !name && loaded) && <h4>No profile, please create one...</h4>}\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}